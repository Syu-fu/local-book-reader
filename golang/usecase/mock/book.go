// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/book.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	"fmt"
	model "local-book-reader/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookUsecase is a mock of BookUsecase interface.
type MockBookUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBookUsecaseMockRecorder
}

// MockBookUsecaseMockRecorder is the mock recorder for MockBookUsecase.
type MockBookUsecaseMockRecorder struct {
	mock *MockBookUsecase
}

// NewMockBookUsecase creates a new mock instance.
func NewMockBookUsecase(ctrl *gomock.Controller) *MockBookUsecase {
	mock := &MockBookUsecase{ctrl: ctrl}
	mock.recorder = &MockBookUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookUsecase) EXPECT() *MockBookUsecaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBookUsecase) Add(arg0 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBookUsecaseMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBookUsecase)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockBookUsecase) Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookUsecaseMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookUsecase)(nil).Delete), arg0, arg1)
}

// Edit mocks base method.
func (m *MockBookUsecase) Edit(arg0 *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockBookUsecaseMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockBookUsecase)(nil).Edit), arg0)
}

// GetById mocks base method.
func (m *MockBookUsecase) GetById(arg0 string) ([]*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	fmt.Println("getByIdcalleddddddd")
	ret0, _ := ret[0].([]*model.Book)
	fmt.Println(ret0)
	fmt.Println(reflect.TypeOf(ret0))
	ret1, _ := ret[1].(error)
	fmt.Println(ret1)
	fmt.Println(reflect.TypeOf(ret1))
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockBookUsecaseMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	fmt.Println("arg0:" + reflect.TypeOf(arg0).String())
	fmt.Println("getById:" + reflect.TypeOf((*MockBookUsecase)(nil).GetById).String())
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBookUsecase)(nil).GetById), arg0)
}

// GetByIdAndVolume mocks base method.
func (m *MockBookUsecase) GetByIdAndVolume(arg0, arg1 string) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdAndVolume", arg0, arg1)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdAndVolume indicates an expected call of GetByIdAndVolume.
func (mr *MockBookUsecaseMockRecorder) GetByIdAndVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdAndVolume", reflect.TypeOf((*MockBookUsecase)(nil).GetByIdAndVolume), arg0, arg1)
}
