// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/book.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "local-book-reader/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookRepository) Create(book *model.Book) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", book)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookRepositoryMockRecorder) Create(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookRepository)(nil).Create), book)
}

// Delete mocks base method.
func (m *MockBookRepository) Delete(id, volume string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, volume)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockBookRepositoryMockRecorder) Delete(id, volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookRepository)(nil).Delete), id, volume)
}

// ReadById mocks base method.
func (m *MockBookRepository) ReadById(id string) ([]*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadById", id)
	ret0, _ := ret[0].([]*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadById indicates an expected call of ReadById.
func (mr *MockBookRepositoryMockRecorder) ReadById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadById", reflect.TypeOf((*MockBookRepository)(nil).ReadById), id)
}

// ReadByIdAndVolume mocks base method.
func (m *MockBookRepository) ReadByIdAndVolume(id, volume string) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByIdAndVolume", id, volume)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByIdAndVolume indicates an expected call of ReadByIdAndVolume.
func (mr *MockBookRepositoryMockRecorder) ReadByIdAndVolume(id, volume interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByIdAndVolume", reflect.TypeOf((*MockBookRepository)(nil).ReadByIdAndVolume), id, volume)
}

// Update mocks base method.
func (m *MockBookRepository) Update(book *model.Book) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", book)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBookRepositoryMockRecorder) Update(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookRepository)(nil).Update), book)
}
